{"version":3,"sources":["../src/application.ts"],"names":[],"mappings":"AAMA,OAAO,kBAAkB,CAAA;AAGzB,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAA;AAK9C,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAA;AAGpE;IACE,SAAS,CAAC,GAAG,CAAC,EAAE,OAAO,CAAA;IACvB,SAAS,CAAC,OAAO,EAAE,kBAAkB,CAAA;gBAGnC,OAAO,GAAE,kBAAuD;IASrD,GAAG,IAAK,OAAO,CAAC,IAAI,CAAC;IAS3B,IAAI,CAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI;IASlD,UAAU,IAAK,IAAI;IAUnB,UAAU,IAAK,IAAI;IAInB,WAAW,IAAK,IAAI;IAIpB,WAAW,IAAK,IAAI;CAG5B","file":"application.js","sourcesContent":["/**\r\n * Copyright 2018-present, CODECO. All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport 'reflect-metadata'\r\nimport { Container } from '@pii/di'\r\nimport { Errors, ErrorToken } from './errors'\r\nimport { ILogger } from './interfaces/iLogger'\r\nimport { IServer } from './interfaces/iServer'\r\nimport { LoggerToken } from './logger'\r\nimport { ServerToken } from './server'\r\nimport { LogTransportToken } from './logFactory'\r\nimport { ApplicationOptions } from './interfaces/applicationOptions'\r\nconst winston = require('winston')\r\n\r\nexport class Application {\r\n  protected log?: ILogger\r\n  protected options: ApplicationOptions\r\n\r\n  constructor (\r\n    options: ApplicationOptions = { projectName: 'pii-application' }\r\n  ) {\r\n    this.options = options\r\n    this.loadLogger()\r\n    this.loadErrors()\r\n    this.loadConfigs()\r\n    this.log = Container.get(LoggerToken)\r\n  }\r\n\r\n  public async run (): Promise<void> {\r\n    this.loadServers()\r\n    const servers = Container.getServices<IServer>(ServerToken)\r\n    for (let i = 0; i < servers.length; i++) {\r\n      const server = servers[i]\r\n      await server.start()\r\n    }\r\n  }\r\n\r\n  public kill (pid: number, signal?: string | number): void {\r\n    const servers = Container.getServices<IServer>(ServerToken)\r\n    for (let i = 0; i < servers.length; i++) {\r\n      const server = servers[i]\r\n      server.stop()\r\n    }\r\n    process.kill(pid, signal)\r\n  }\r\n\r\n  public loadLogger (): void {\r\n    const consoleTransport = new winston.transports.Console({\r\n      level: 'debug',\r\n      handleExceptions: true,\r\n      json: false,\r\n      colorize: true\r\n    })\r\n    Container.addSingleton(LogTransportToken, consoleTransport)\r\n  }\r\n\r\n  public loadErrors (): void {\r\n    Container.addSingleton(ErrorToken, new Errors())\r\n  }\r\n\r\n  public loadConfigs (): void {\r\n    // does nothing\r\n  }\r\n\r\n  public loadServers (): void {\r\n    // does nothing\r\n  }\r\n}\r\n"]}