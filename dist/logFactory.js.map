{"version":3,"sources":["../src/logFactory.ts"],"names":[],"mappings":";;;;;;;;;;;AAMA,gCAAsD;AACtD,qCAIgB;AAEhB,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAErB,QAAA,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;AAC9C,QAAA,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;AAGvD,IAAa,UAAU,GAAvB;IADA;QAIS,aAAQ,GAAY,IAAI,CAAA;QACxB,gBAAW,GAAY,KAAK,CAAA;IA8CrC,CAAC;IAzCQ,SAAS,CAAE,MAAc;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAEM,SAAS,CAAE,MAAc;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAEM,MAAM;QACX,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,SAAS,CAAC;YACb,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,CAAC;YACV,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;SACT,CAAC,CAAA;QACF,IAAI,CAAC,SAAS,CAAC;YACb,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,QAAQ;YACjB,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,MAAM;YACb,KAAK,EAAE,MAAM;SACd,CAAC,CAAA;QACF,MAAM,MAAM,GAAQ,IAAI,gBAAa,CAAC;YACpC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAA;QACF,MAAM,CAAC,MAAM,GAAG;YACd,KAAK,EAAE,CAAC,OAAe,EAAE,QAAgB,EAAE,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAA;YACzC,CAAC;SACF,CAAA;QACD,OAAO,MAAM,CAAA;IACf,CAAC;CACF,CAAA;AAhDgC;IAA9B,eAAU,CAAC,yBAAiB,CAAC;;8CAAuC;AAF1D,UAAU;IADtB,qBAAgB,CAAC,uBAAe,CAAC;GACrB,UAAU,CAkDtB;AAlDY,gCAAU","file":"logFactory.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { SingletonService, InjectMany } from '@pii/di'\nimport {\n  TransportInstance,\n  LoggerInstance,\n  Logger as winstonLogger\n} from 'winston'\nimport { ILogFactory } from './interfaces/iLogFactory'\nconst winston = require('winston')\n\nexport const LogTransportToken = Symbol.for('LogTransport')\nexport const LogFactoryToken = Symbol.for('LogFactory')\n\n@SingletonService(LogFactoryToken)\nexport class LogFactory implements ILogFactory<LoggerInstance> {\n  // @ts-ignore\n  @InjectMany(LogTransportToken) public transports: TransportInstance[]\n  public emitErrs: boolean = true\n  public exitOnError: boolean = false\n\n  protected levels: any\n  protected colors: any\n\n  public setLevels (levels: Object) {\n    this.levels = levels\n    winston.setLevels(levels)\n  }\n\n  public setColors (colors: Object) {\n    this.colors = colors\n    winston.addColors(colors)\n  }\n\n  public getLog (): LoggerInstance {\n    winston.emitErrs = this.emitErrs\n    this.setLevels({\n      fatal: 0,\n      error: 1,\n      warning: 2,\n      info: 3,\n      debug: 4,\n      trace: 5\n    })\n    this.setColors({\n      fatal: 'red',\n      error: 'red',\n      warning: 'yellow',\n      info: 'green',\n      debug: 'blue',\n      trace: 'gray'\n    })\n    const logger: any = new winstonLogger({\n      levels: this.levels,\n      colors: this.colors,\n      transports: this.transports,\n      exitOnError: this.exitOnError\n    })\n    logger.stream = {\n      write: (message: string, encoding: string) => {\n        logger.info(message.replace(/\\n$/, ''))\n      }\n    }\n    return logger\n  }\n}\n"]}