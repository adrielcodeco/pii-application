{"version":3,"sources":["../src/logFactory.ts"],"names":[],"mappings":"AAOA,OAAO,EACL,iBAAiB,EACjB,cAAc,EAEf,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAA;AAGtD,eAAO,MAAM,iBAAiB,eAA6B,CAAA;AAC3D,eAAO,MAAM,eAAe,eAA2B,CAAA;AAEvD,+BACwB,YAAW,WAAW,CAAC,cAAc,CAAC;IAEtB,UAAU,EAAE,iBAAiB,EAAE,CAAA;IAC9D,QAAQ,EAAE,OAAO,CAAO;IACxB,WAAW,EAAE,OAAO,CAAQ;IAEnC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAA;IACrB,SAAS,CAAC,MAAM,EAAE,GAAG,CAAA;IAEd,SAAS,CAAE,MAAM,EAAE,MAAM;IAKzB,SAAS,CAAE,MAAM,EAAE,MAAM;IAKzB,MAAM,IAAK,cAAc;CA+BjC","file":"logFactory.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { SingletonService, InjectMany } from '@pii/di'\nimport {\n  TransportInstance,\n  LoggerInstance,\n  Logger as winstonLogger\n} from 'winston'\nimport { ILogFactory } from './interfaces/iLogFactory'\nconst winston = require('winston')\n\nexport const LogTransportToken = Symbol.for('LogTransport')\nexport const LogFactoryToken = Symbol.for('LogFactory')\n\n@SingletonService(LogFactoryToken)\nexport class LogFactory implements ILogFactory<LoggerInstance> {\n  // @ts-ignore\n  @InjectMany(LogTransportToken) public transports: TransportInstance[]\n  public emitErrs: boolean = true\n  public exitOnError: boolean = false\n\n  protected levels: any\n  protected colors: any\n\n  public setLevels (levels: Object) {\n    this.levels = levels\n    winston.setLevels(levels)\n  }\n\n  public setColors (colors: Object) {\n    this.colors = colors\n    winston.addColors(colors)\n  }\n\n  public getLog (): LoggerInstance {\n    winston.emitErrs = this.emitErrs\n    this.setLevels({\n      fatal: 0,\n      error: 1,\n      warning: 2,\n      info: 3,\n      debug: 4,\n      trace: 5\n    })\n    this.setColors({\n      fatal: 'red',\n      error: 'red',\n      warning: 'yellow',\n      info: 'green',\n      debug: 'blue',\n      trace: 'gray'\n    })\n    const logger: any = new winstonLogger({\n      levels: this.levels,\n      colors: this.colors,\n      transports: this.transports,\n      exitOnError: this.exitOnError\n    })\n    logger.stream = {\n      write: (message: string, encoding: string) => {\n        logger.info(message.replace(/\\n$/, ''))\n      }\n    }\n    return logger\n  }\n}\n"]}