{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":";;;;;;;;;;;AAMA,gCAAqD;AAErD,6CAA8C;AAIjC,QAAA,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;AAG3C,IAAa,MAAM,GAAnB;IAOE;QACE,MAAM,OAAO,GAAG,cAAS,CAAC,GAAG,CAA8B,4BAAe,CAAC,CAAA;QAC3E,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC5C;QACD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAA;IAChC,CAAC;IAZD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;IAC3B,CAAC;IAYM,GAAG,CAAE,GAAW,EAAE,QAAgB,MAAM;QAC7C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IAC7B,CAAC;IAEM,KAAK,CAAE,GAAW;QACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACxB,CAAC;IAEM,IAAI,CAAE,GAAW;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAEM,IAAI,CAAE,GAAW;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;IAEM,KAAK,CAAE,GAAW;QACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACxB,CAAC;IAEM,MAAM,CAAE,GAAW;QACxB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAEM,IAAI,CAAE,GAAW;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvB,CAAC;CACF,CAAA;AA1CY,MAAM;IADlB,qBAAgB,CAAC,mBAAW,CAAC;;GACjB,MAAM,CA0ClB;AA1CY,wBAAM","file":"logger.js","sourcesContent":["/**\r\n * Copyright 2018-present, CODECO. All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport { Container, SingletonService } from '@pii/di'\r\nimport { LoggerInstance } from 'winston'\r\nimport { LogFactoryToken } from './logFactory'\r\nimport { ILogFactory } from './interfaces/iLogFactory'\r\nimport { ILogger } from './interfaces/iLogger'\r\n\r\nexport const LoggerToken = Symbol('Logger')\r\n\r\n@SingletonService(LoggerToken)\r\nexport class Logger implements ILogger {\r\n  get stream (): any {\r\n    return this.logger.stream\r\n  }\r\n\r\n  protected logger: LoggerInstance\r\n\r\n  constructor () {\r\n    const factory = Container.get<ILogFactory<LoggerInstance>>(LogFactoryToken)\r\n    if (!factory) {\r\n      throw new Error('logger factory not found')\r\n    }\r\n    this.logger = factory.getLog()\r\n  }\r\n\r\n  public log (log: string, level: string = 'info'): void {\r\n    this.logger.log(log, level)\r\n  }\r\n\r\n  public error (log: string): void {\r\n    this.logger.error(log)\r\n  }\r\n\r\n  public warn (log: string): void {\r\n    this.logger.warn(log)\r\n  }\r\n\r\n  public info (log: string): void {\r\n    this.logger.info(log)\r\n  }\r\n\r\n  public debug (log: string): void {\r\n    this.logger.debug(log)\r\n  }\r\n\r\n  public notice (log: string): void {\r\n    this.logger.notice(log)\r\n  }\r\n\r\n  public crit (log: string): void {\r\n    this.logger.crit(log)\r\n  }\r\n}\r\n"]}