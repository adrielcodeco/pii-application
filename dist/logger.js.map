{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAA;AAGxC,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAA;AAE9C,eAAO,MAAM,WAAW,eAAmB,CAAA;AAE3C,2BACoB,YAAW,OAAO;aAChC,MAAM,EAAK,GAAG;IAIlB,SAAS,CAAC,MAAM,EAAE,cAAc,CAAA;;IAUzB,GAAG,CAAE,GAAG,EAAE,MAAM,EAAE,KAAK,GAAE,MAAe,GAAG,IAAI;IAI/C,KAAK,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAIzB,IAAI,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAIxB,IAAI,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAIxB,KAAK,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAIzB,MAAM,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAI1B,IAAI,CAAE,GAAG,EAAE,MAAM,GAAG,IAAI;CAGhC","file":"logger.js","sourcesContent":["/**\r\n * Copyright 2018-present, CODECO. All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport { Container, SingletonService } from '@pii/di'\r\nimport { LoggerInstance } from 'winston'\r\nimport { LogFactoryToken } from './logFactory'\r\nimport { ILogFactory } from './interfaces/iLogFactory'\r\nimport { ILogger } from './interfaces/iLogger'\r\n\r\nexport const LoggerToken = Symbol('Logger')\r\n\r\n@SingletonService(LoggerToken)\r\nexport class Logger implements ILogger {\r\n  get stream (): any {\r\n    return this.logger.stream\r\n  }\r\n\r\n  protected logger: LoggerInstance\r\n\r\n  constructor () {\r\n    const factory = Container.get<ILogFactory<LoggerInstance>>(LogFactoryToken)\r\n    if (!factory) {\r\n      throw new Error('logger factory not found')\r\n    }\r\n    this.logger = factory.getLog()\r\n  }\r\n\r\n  public log (log: string, level: string = 'info'): void {\r\n    this.logger.log(log, level)\r\n  }\r\n\r\n  public error (log: string): void {\r\n    this.logger.error(log)\r\n  }\r\n\r\n  public warn (log: string): void {\r\n    this.logger.warn(log)\r\n  }\r\n\r\n  public info (log: string): void {\r\n    this.logger.info(log)\r\n  }\r\n\r\n  public debug (log: string): void {\r\n    this.logger.debug(log)\r\n  }\r\n\r\n  public notice (log: string): void {\r\n    this.logger.notice(log)\r\n  }\r\n\r\n  public crit (log: string): void {\r\n    this.logger.crit(log)\r\n  }\r\n}\r\n"]}