{"version":3,"sources":["../src/exception.ts"],"names":[],"mappings":";;AAOA,+CAA2C;AAE3C;IAUE,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,IAAI,EAAE,CAAA;IACzB,CAAC;IACD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAA;IAC5B,CAAC;IACD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,IAAI,EAAE,CAAA;IACjC,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,IAAI,EAAE,CAAA;IAC3B,CAAC;IACD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAA;IAC5B,CAAC;IAED,YAAa,EACX,IAAI,EACJ,OAAO,EACP,YAAY,EACZ,MAAM,EACN,OAAO,KACa,EAAE;QACtB,IAAI,CAAC,gBAAgB;YACnB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;gBACvD,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,yBAAW,CAAC,WAAW;oBAC/C,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;gBAC/B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAA;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QACjB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAA;QACjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QAEvB,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QAC/C,IAAI,CAAC,IAAI,CAAC,gBAAgB;YAAE,OAAO,IAAI,CAAC,KAAK,CAAA;IAC/C,CAAC;IAEM,MAAM;QACX,MAAM,GAAG,GAAQ,EAAE,CAAA;QACnB,IAAI,IAAI,CAAC,KAAK;YAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAA;QACrC,IAAI,IAAI,CAAC,QAAQ;YAAE,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9C,IAAI,IAAI,CAAC,aAAa;YAAE,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAA;QAC7D,IAAI,IAAI,CAAC,OAAO;YAAE,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;QAC3C,IAAI,IAAI,CAAC,QAAQ;YAAE,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9C,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK;YAAE,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;QAC/D,OAAO,GAAG,CAAA;IACZ,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IACtC,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAA;IACxB,CAAC;IAED,CAAC,MAAM,CAAC,WAAW,CAAC,CAAE,IAAY;QAChC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAA;IACxB,CAAC;CACF;AAtED,8BAsEC","file":"exception.js","sourcesContent":["/**\r\n * Copyright 2018-present, CODECO. All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nimport { ExceptionOptions } from './interfaces/exceptionOptions'\r\nimport { Environment } from './environment'\r\n\r\nexport class Exception {\r\n  public stack?: string\r\n\r\n  private _code?: string\r\n  private _message?: string\r\n  private _shortMessage?: string\r\n  private _params?: string\r\n  private _details?: string\r\n  private _developmentMode?: boolean\r\n\r\n  get code (): string {\r\n    return this._code || ''\r\n  }\r\n  get message (): string {\r\n    return this._message || ''\r\n  }\r\n  get shortMessage (): string {\r\n    return this._shortMessage || ''\r\n  }\r\n  get params (): string {\r\n    return this._params || ''\r\n  }\r\n  get details (): string {\r\n    return this._details || ''\r\n  }\r\n\r\n  constructor ({\r\n    code,\r\n    message,\r\n    shortMessage,\r\n    params,\r\n    details\r\n  }: ExceptionOptions = {}) {\r\n    this._developmentMode =\r\n      (!process.env.NODE_ENV && !process.env.DEVELOPMENTMODE) ||\r\n      (process.env.NODE_ENV === Environment.development &&\r\n        !process.env.DEVELOPMENTMODE) ||\r\n      !!process.env.DEVELOPMENTMODE\r\n    this._code = code\r\n    this._message = message\r\n    this._shortMessage = shortMessage\r\n    this._params = params\r\n    this._details = details\r\n\r\n    Error.captureStackTrace(this, this.constructor)\r\n    if (!this._developmentMode) delete this.stack\r\n  }\r\n\r\n  public toJSON (): object {\r\n    const str: any = {}\r\n    if (this._code) str.code = this._code\r\n    if (this._message) str.message = this._message\r\n    if (this._shortMessage) str.shortMessage = this._shortMessage\r\n    if (this._params) str.params = this._params\r\n    if (this._details) str.details = this._details\r\n    if (this._developmentMode && this.stack) str.stack = this.stack\r\n    return str\r\n  }\r\n\r\n  public toString (): string {\r\n    return JSON.stringify(this.toJSON())\r\n  }\r\n\r\n  public valueOf (): string {\r\n    return this.toString()\r\n  }\r\n\r\n  [Symbol.toPrimitive] (hint: string): string {\r\n    return this.toString()\r\n  }\r\n}\r\n"]}